### Single-cell RNA-seq analysis of GBM cells ###
# study: https://www.nature.com/articles/s41467-022-28372-y#data-availability

# Load required packages
library(Seurat)
library(Matrix)
library(patchwork)

# Load data and save as RDS object
data <- read.table("GSM3828673_10X_GBM_IDHwt_processed_TPM.tsv", header = TRUE, row.names = 1, sep = "\t")
saveRDS(data, "gbm_data.rds")

# Read scRNA-seq data from RDS file
gbm_data <- readRDS("gbm_data.rds")

# Check whether the data is 10X data
is.10x.data(gbm_data)

# Pre-process the data
gbm_data <- CreateSeuratObject(counts = gbm_data)
gbm_data <- SCTransform(gbm_data)
gbm_data <- RunPCA(gbm_data)
gbm_data <- FindVariableFeatures(gbm_data, selection.method = "vst", nfeatures = 2000)
gbm_data <- ScaleData(gbm_data)
gbm_data <- RunUMAP(gbm_data)

# Perform quality control
gbm_data <- FilterCells(gbm_data, min.nFeature = 200, min.nCount = 500, max.nFeature = 5000)
gbm_data <- FilterFeatures(gbm_data, min.cells = 3)
gbm_data <- SCTransform(gbm_data, vars.to.regress = c("nCount_RNA", "percent.mt"), verbose = FALSE)

# Normalize the data
gbm_data <- NormalizeData(gbm_data)

# Detect variable genes across the single cells
gbm_data <- FindVariableFeatures(gbm_data, selection.method = "vst", nfeatures = 2000)

# Cluster the cells
gbm_data <- FindNeighbors(gbm_data, dims = 1:20)
gbm_data <- FindClusters(gbm_data, resolution = 0.6)

# Find differentially expressed genes
gbm_data.markers <- FindAllMarkers(gbm_data, only.pos = TRUE, logfc.threshold = 0.25, min.pct = 0.1)

# Make a heatmap showing the top 10 markers
top10_markers <- gbm_data.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
top10_markers_list <- split(top10_markers, f = top10_markers$cluster)
heatmaps_list <- lapply(X = top10_markers_list, FUN = function(x) {
  FeaturePlot(object = gbm_data, features = x$gene, pt.size = 0, min.cutoff = "q10")
})
heatmap_combined <- wrap_plots(plotlist = heatmaps_list, nrow = 2, ncol = 5)
print(heatmap_combined)

# Get genes uniquely differentially expressed in each cluster
unique_markers_list <- lapply(X = 0:(gbm_data@meta.data$seurat_clusters %>% unique() %>% length() - 1), FUN = function(x) {
  subset(x = gbm_data.markers, subset = cluster == x & p_val_adj < 0.05 & avg_log2FC > 0)
})
unique_markers_combined <- Reduce(f = function(x, y) merge(x, y, by = "gene", all = TRUE), x = unique_markers_list)
unique_markers_combined <- unique_markers_combined[complete.cases(unique_markers_combined),]


